Patient:
  columns:
    id:                     { type: integer, primary: true, autoincrement: true }
    social_security_number: { type: integer, notnull: true, comment: 'taj szam'}
    born_at:                { type: string(255), notnull: true, comment: 'szuletesi hely, idopont'}
    address:                { type: string(255), notnull: true, comment: 'lakcim' }
  relations:
    sfGuardUser:
      local:        id
      foreignType:  one
      foreignAlias: PatientRole
Observer:
  comment:                Hozzátartozó, felügyelő vagy gondozó
  columns:
    id:                   { type: integer, primary: true, autoincrement: true }
  relations:
    sfGuardUser:
      local:        id
      foreignType:  one
      foreignAlias: ObserverRole
    Observants:
      class:       Entity
      refClass:    Observation
      foreignAlias: Observers
Observation:
  columns:
    observer_id:  { type: integer, primary: true }
    entity_id:    { type: integer, primary: true }
  relations:
    Observer:
    Entity:

Entity:
  actAs:
    NestedSet:
      hasManyRoots: true
      rootColumnName: root_id
  columns:
    id:             { type: integer, primary: true, autoincrement: true }
    name:           { type: string(255), notnull: true }
    comment:        { type: clob }
    type:           { type: string(255), notnull: true }
Home:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
Locality:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    locality_type_id: { type: integer }
  relations:
    LocalityType:
LocalityType:
  columns:
    id:           { type: integer, primary: true, autoincrement: true }
    description:  { type: string(255), notnull: true }
    leiras:       { type: string(255), notnull: true }
Window:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    locality_id:  { type: integer }
  relations:
    Locality:
Door:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    locality_id:      { type: integer }
    locality2_id:     { type: integer }
  relations:
    Locality1:
    Locality2:
      class: Locality
      local: locality2_id
DataSource:
  inheritance:
    extends: Entity
    type: column_aggregation
  relations:
    Devices:
      class: Device
      refClass: DataSourceRealization
DataSourceRealization:
  columns:
    data_source_id:   { type: integer, primary: true }
    device_id:        { type: integer, primary: true }
Device:
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    guid:             { type: string(255), notnull: true, unique: true }

Measurement:
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    entity_id:        { type: integer, notnull: true }
    data_source_id:   { type: integer, notnull: true }
  relations:
    About:
      class: Entity
    Source:
      class: DataSource
TimedMeasurement:
  abstract: true
  inheritance:
    extends: Measurement
    type: concrete
  columns:
    timestamp:    { type: integer, notnull: true }
  indexes:
    timestamp:
      fields: [timestamp]
ScalarTimedMeasurement:
  abstract: true
  inheritance:
    extends: TimedMeasurement
    type: concrete
  columns:
    #data - scalar field defined in subclasses
EmptyTimedMeasurement:
  abstract: true
  inheritance:
    extends: TimedMeasurement
    type: concrete