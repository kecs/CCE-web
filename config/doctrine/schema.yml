### NOTABENE: moved from plugins/sfDoctrineGuardPlugin

sfGuardGroup:
  actAs: [Timestampable]
  columns:
    name:
      type: string(255)
      unique: true
    description: string(1000)
  relations:
    Users:
      class: sfGuardUser
      refClass: sfGuardUserGroup
      local: group_id
      foreign: user_id
      foreignAlias: Groups
    Permissions:
      class: sfGuardPermission
      local: group_id
      foreign: permission_id
      refClass: sfGuardGroupPermission
      foreignAlias: Groups

sfGuardPermission:
  actAs: [Timestampable]
  columns:
    name:
      type: string(255)
      unique: true
    description: string(1000)

sfGuardGroupPermission:
  options:
    symfony:
      form:   false
      filter: false
  actAs: [Timestampable]
  columns:
    group_id:
      type: integer
      primary: true
    permission_id:
      type: integer
      primary: true
  relations:
    Group:
      class: sfGuardGroup
      local: group_id
      onDelete: CASCADE
    Permission:
      class: sfGuardPermission
      local: permission_id
      onDelete: CASCADE

sfGuardUserPermission:
  options:
    symfony:
      form:   false
      filter: false
  actAs: [Timestampable]
  columns:
    user_id:
      type: integer
      primary: true
    permission_id:
      type: integer
      primary: true
  relations:
    User:
      class: sfGuardUser
      local: user_id
      onDelete: CASCADE
    Permission:
      class: sfGuardPermission
      local: permission_id
      onDelete: CASCADE

sfGuardUserGroup:
  options:
    symfony:
      form:   false
      filter: false
  actAs: [Timestampable]
  columns:
    user_id:
      type: integer
      primary: true
    group_id:
      type: integer
      primary: true
  relations:
    User:
      class: sfGuardUser
      local: user_id
      onDelete: CASCADE
    Group:
      class: sfGuardGroup
      local: group_id
      onDelete: CASCADE

sfGuardRememberKey:
  options:
    symfony:
      form:   false
      filter: false
  actAs: [Timestampable]
  columns:
    user_id: integer
    remember_key: string(32)
    ip_address: string(50)
  relations:
    User:
      class: sfGuardUser
      local: user_id
      foreignAlias: RememberKeys
      foreignType: one
      onDelete: CASCADE

sfGuardForgotPassword:
  options:
    symfony:
      form:   false
      filter: false
  actAs: [Timestampable]
  columns:
    user_id:
      type: integer
      notnull: true
    unique_key: string(255)
    expires_at:
      type: timestamp
      notnull: true
  relations:
    User:
      class: sfGuardUser
      local: user_id
      type: one
      foreignType: one
      foreignAlias: ForgotPassword
      onDelete: CASCADE
      
### end_NOTABENE


sfGuardUser:
  actAs: [Timestampable]
  columns:
    first_name: string(255)
    last_name: string(255)
    email_address:
      type: string(255)
      notnull: true
      unique: true
    username:
      type: string(128)
      notnull: true
      unique: true
    algorithm:
      type: string(128)
      default: sha1
      notnull: true
    salt: string(128)
    password: string(128)
    is_active:
      type: boolean
      default: 1
    is_super_admin:
      type: boolean
      default: false
    last_login:
      type: timestamp
    patient_id: integer
    observer_id: integer
  indexes:
    is_active_idx:
      fields: [is_active]
  relations:
    Groups:
      class: sfGuardGroup
      local: user_id
      foreign: group_id
      refClass: sfGuardUserGroup
      foreignAlias: Users
    Permissions:
      class: sfGuardPermission
      local: user_id
      foreign: permission_id
      refClass: sfGuardUserPermission
      foreignAlias: Users
    PatientRole:
      #Patient
      class: Entity
      local: patient_id
      foreignType: one
      onDelete: set null
    ObserverRole:
      class: Observer
      foreignType: one
      onDelete: set null

Observer:
  comment:                Hozzátartozó, felügyelő vagy gondozó
  columns:
    id:                   { type: integer, primary: true, autoincrement: true }
  relations:
    Observants:
      class:       Entity
      refClass:    Observation
      foreignAlias: Observers
Observation:
  columns:
    observer_id:  { type: integer, primary: true }
    entity_id:    { type: integer, primary: true }
  relations:
    Observer:
      onDelete: CASCADE
    Entity:
      onDelete: CASCADE

EntityType:
  actAs:
    I18n:
      fields: [name]
  columns:
    className:      { type: string(255), primary: true }
    id:             { type: integer, unique: true }
    name:           { type: string(255), notnull: true }
Entity:
  actAs:
    NestedSet:
      hasManyRoots: true
      rootColumnName: root_id
  columns:
    id:             { type: integer, primary: true, autoincrement: true }
    name:           { type: string(255), notnull: true }
    comment:        { type: clob }
    type:           { type: string(255), notnull: false }
    channel:        { type: string(255) }
    error_lower_limit:   { type: float }
    warning_lower_limit: { type: float }
    warning_upper_limit: { type: float }
    error_upper_limit:   { type: float }
  relations:
    LocalityType:
    Locality1:
      class: Entity
      #Locality in reality
      local: locality_id
    Locality2:
      class: Entity
      #Locality in reality
      local: locality2_id
    EntityType:
      class: EntityType
      local: type
      foreign: className
Patient:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    #name feluldefinialva az sfGuardUser-beli nevvel
    social_security_number: { type: integer, comment: 'taj szam'}
    born_at:                { type: string(255), comment: 'szuletesi hely, idopont'}
    address:                { type: string(255), comment: 'lakcim' }
    calendar_url:           { type: string(255), notnull: true }
Home:
  inheritance:
    extends: Entity
    type: column_aggregation
Locality:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    locality_type_id: { type: integer }
  relations:
    LocalityType:
LocalityType:
  columns:
    id:           { type: integer, primary: true, autoincrement: true }
    description:  { type: string(255), notnull: true }
    leiras:       { type: string(255), notnull: true }
Window:
  inheritance:
    extends: Entity
    type: column_aggregation
Door:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    locality_id:      { type: integer }
    locality2_id:     { type: integer }
  relations:
    Locality1:
      class: Entity
      #Locality in reality
      local: locality_id
    Locality2:
      class: Entity
      #Locality in reality
      local: locality2_id
DataSource:
  inheritance:
    extends: Entity
    type: column_aggregation
  relations:
    AffectedBy:
      class: Entity
      local: id
      foreign: data_source_id
      refClass: DataSourceAffected
      foreignAlias: AffectedDataSources
DataSourceAffected:
  columns:
    data_source_id:   { type: integer, primary: true }
    entity_id:        { type: integer, primary: true }
  relations:
    DataSource:
      #practically DataSource
      class: Entity
      local: data_source_id
    HasEffect:
      class: Entity
      local: entity_id
Device:
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    pan_id:           { type: string(255), notnull: true }
    extended_id:      { type: string(16), notnull: true }
  indexes:
    guid:
      type:   unique
      fields: [pan_id, extended_id]
Sensor:
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    device_id:        { type: integer, notnull: true }
    endpoint_number:  { type: integer(1) }
    cluster_id:       { type: integer(2) }
    hgw_id:           { type: integer(2) }
    data_source_id:   { type: integer }
  indexes:
    guid:
      type:   unique
      fields: [device_id, endpoint_number, cluster_id]
  relations:
    Device:
      class: Device
      local: device_id
    DataSource:
      #DataSource class in reality
      class: Entity
      local: data_source_id

Measurement:
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    entity_id:        { type: integer, notnull: true }
    data_source_id:   { type: integer }
  relations:
    About:
      class: Entity
      local: entity_id
    Source:
      #practically DataSource
      class: Entity
      local: data_source_id
TimedMeasurement:
  abstract: true
  inheritance:
    extends: Measurement
    type: concrete
  columns:
    timestamp:    { type: integer, notnull: true }
  indexes:
    timestamp:
      fields: [timestamp]
ScalarTimedMeasurement:
  abstract: true
  inheritance:
    extends: TimedMeasurement
    type: concrete
  columns:
    #value - scalar field defined in subclasses
EmptyTimedMeasurement:
  abstract: true
  inheritance:
    extends: TimedMeasurement
    type: concrete
