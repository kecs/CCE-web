sfGuardUser:
  actAs: [Timestampable]
  columns:
    first_name: string(255)
    last_name: string(255)
    email_address:
      type: string(255)
      notnull: true
      unique: true
    username:
      type: string(128)
      notnull: true
      unique: true
    algorithm:
      type: string(128)
      default: sha1
      notnull: true
    salt: string(128)
    password: string(128)
    is_active:
      type: boolean
      default: 1
    is_super_admin:
      type: boolean
      default: false
    last_login:
      type: timestamp
    patient_id: integer
    observer_id: integer
  indexes:
    is_active_idx:
      fields: [is_active]
  relations:
    Groups:
      class: sfGuardGroup
      local: user_id
      foreign: group_id
      refClass: sfGuardUserGroup
      foreignAlias: Users
    Permissions:
      class: sfGuardPermission
      local: user_id
      foreign: permission_id
      refClass: sfGuardUserPermission
      foreignAlias: Users
    PatientRole:
      #Patient
      class: Entity
      local: patient_id
      foreignType: one
      onDelete: set null
    ObserverRole:
      class: Observer
      foreignType: one
      onDelete: set null

Observer:
  comment:                Hozzátartozó, felügyelő vagy gondozó
  columns:
    id:                   { type: integer, primary: true, autoincrement: true }
  relations:
    Observants:
      class:       Entity
      refClass:    Observation
      foreignAlias: Observers
Observation:
  columns:
    observer_id:  { type: integer, primary: true }
    entity_id:    { type: integer, primary: true }
  relations:
    Observer:
    Entity:

Entity:
  actAs:
    NestedSet:
      hasManyRoots: true
      rootColumnName: root_id
  columns:
    id:             { type: integer, primary: true, autoincrement: true }
    name:           { type: string(255), notnull: true }
    comment:        { type: clob }
    type:           { type: string(255), notnull: true }
  relations:
    LocalityType:
    Locality:
    Locality1:
    Locality2:
      class: Locality
      local: locality2_id
Patient:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    social_security_number: { type: integer, comment: 'taj szam'}
    born_at:                { type: string(255), comment: 'szuletesi hely, idopont'}
    address:                { type: string(255), comment: 'lakcim' }
Home:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
Locality:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    locality_type_id: { type: integer }
  relations:
    LocalityType:
LocalityType:
  columns:
    id:           { type: integer, primary: true, autoincrement: true }
    description:  { type: string(255), notnull: true }
    leiras:       { type: string(255), notnull: true }
Window:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    locality_id:  { type: integer }
  relations:
    Locality:
Door:
  inheritance:
    extends: Entity
    type: column_aggregation
  columns:
    locality_id:      { type: integer }
    locality2_id:     { type: integer }
  relations:
    Locality1:
    Locality2:
      class: Locality
      local: locality2_id
DataSource:
  inheritance:
    extends: Entity
    type: column_aggregation
Device:
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    guid:             { type: string(255), notnull: true, unique: true }
    data_source_id:   { type: integer }
  relations:
    DataSource:
      class: Entity
      local: data_source_id
      #Device class in reality

Measurement:
  columns:
    id:               { type: integer, primary: true, autoincrement: true }
    entity_id:        { type: integer, notnull: true }
    data_source_id:   { type: integer, notnull: true }
  relations:
    About:
      class: Entity
      local: entity_id
    Source:
      #practically DataSource
      class: Entity
      local: data_source_id
TimedMeasurement:
  abstract: true
  inheritance:
    extends: Measurement
    type: concrete
  columns:
    timestamp:    { type: integer, notnull: true }
  indexes:
    timestamp:
      fields: [timestamp]
ScalarTimedMeasurement:
  abstract: true
  inheritance:
    extends: TimedMeasurement
    type: concrete
  columns:
    #value - scalar field defined in subclasses
EmptyTimedMeasurement:
  abstract: true
  inheritance:
    extends: TimedMeasurement
    type: concrete