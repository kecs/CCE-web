<?php

/**
 * BaseEntity
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $comment
 * @property string $type
 * @property integer $locality_type_id
 * @property integer $locality_id
 * @property integer $locality2_id
 * @property clob $remark
 * @property Doctrine_Collection $Observers
 * @property Doctrine_Collection $Observation
 * @property Doctrine_Collection $Measurement
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method string              getComment()          Returns the current record's "comment" value
 * @method string              getType()             Returns the current record's "type" value
 * @method integer             getLocalityTypeId()   Returns the current record's "locality_type_id" value
 * @method integer             getLocalityId()       Returns the current record's "locality_id" value
 * @method integer             getLocality2Id()      Returns the current record's "locality2_id" value
 * @method clob                getRemark()           Returns the current record's "remark" value
 * @method Doctrine_Collection getObservers()        Returns the current record's "Observers" collection
 * @method Doctrine_Collection getObservation()      Returns the current record's "Observation" collection
 * @method Doctrine_Collection getMeasurement()      Returns the current record's "Measurement" collection
 * @method Entity              setId()               Sets the current record's "id" value
 * @method Entity              setComment()          Sets the current record's "comment" value
 * @method Entity              setType()             Sets the current record's "type" value
 * @method Entity              setLocalityTypeId()   Sets the current record's "locality_type_id" value
 * @method Entity              setLocalityId()       Sets the current record's "locality_id" value
 * @method Entity              setLocality2Id()      Sets the current record's "locality2_id" value
 * @method Entity              setRemark()           Sets the current record's "remark" value
 * @method Entity              setObservers()        Sets the current record's "Observers" collection
 * @method Entity              setObservation()      Sets the current record's "Observation" collection
 * @method Entity              setMeasurement()      Sets the current record's "Measurement" collection
 * 
 * @package    cce
 * @subpackage model
 * @author     Adam Banko (Cassus)
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEntity extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('entity');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('comment', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('type', 'string', 255, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('locality_type_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('locality_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('locality2_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => true,
             'length' => 4,
             ));
        $this->hasColumn('remark', 'clob', null, array(
             'type' => 'clob',
             'notnull' => true,
             ));

        $this->setSubClasses(array(
             'Home' => 
             array(
              'type' => 'Home',
             ),
             'Locality' => 
             array(
              'type' => 'Locality',
             ),
             'Window' => 
             array(
              'type' => 'Window',
             ),
             'Door' => 
             array(
              'type' => 'Door',
             ),
             'DataSource' => 
             array(
              'type' => 'DataSource',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Observer as Observers', array(
             'refClass' => 'Observation',
             'local' => 'entity_id',
             'foreign' => 'observer_id'));

        $this->hasMany('Observation', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $this->hasMany('Measurement', array(
             'local' => 'id',
             'foreign' => 'entity_id'));

        $nestedset0 = new Doctrine_Template_NestedSet(array(
             'hasManyRoots' => true,
             'rootColumnName' => 'root_id',
             ));
        $this->actAs($nestedset0);
    }
}